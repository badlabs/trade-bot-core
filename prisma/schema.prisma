// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  output = "../src/db"
}

datasource db {
  provider = "sqlite"
  url      = "file:./storage.db?connection_limit=1&connect_timeout=30"
}

model Currency {
  @@map("Currencies")

  name                String
  ticker              String  @id

  securities         Security[]
  balance            CurrencyBalance?
}

model CurrencyBalance {
  @@map("CurrenciesBalance")

  currency_ticker     String @id
  balance             Float  @default(0)

  currency            Currency  @relation(fields: [currency_ticker], references: [ticker])
}

model Security {
  @@map("Securities")

  name                String
  ticker              String  @id
  price               Float

  currency_ticker     String

  currency              Currency  @relation(fields: [currency_ticker], references: [ticker])
  followed_security     FollowedSecurity?
  portfolio_position    PortfolioPosition?
  orders                Order[]
}

model FollowedSecurity {
  @@map("FollowedSecurities")

  security_ticker     String  @id
  followed_since      DateTime

  security            Security @relation(fields: [security_ticker], references: [ticker])
}

model PortfolioPosition {
  @@map("PortfolioPositions")

  security_ticker   String @id
  amount            Int

  security           Security @relation(fields: [security_ticker], references: [ticker])
}

model Order {
  @@map("Orders")

  exchange_id         String?   @unique
  security_ticker     String
  status_first        String
  operation_type      String
  amount              Int
  price               Float
  run_id              Int?
  created_at          DateTime  @default(now())

  security            Security @relation(fields: [security_ticker], references: [ticker])
  algorithm_run       AlgorithmRun?  @relation(fields: [run_id], references: [id])

  @@id([security_ticker, created_at])
}

model Algorithm {
  @@map("Algorithms")

  name               String     @id
  description        String
  input_types        String

  runs               AlgorithmRun[]
}

model AlgorithmRun {
  @@map("AlgorithmRuns")

  id                 Int        @id @default(autoincrement())
  algorithm_name     String
  inputs             String
  status             String
  state              String
  updated_at         DateTime   @updatedAt
  created_at         DateTime   @default(now())

  algorithm          Algorithm  @relation(fields: [algorithm_name], references: [name])
  operations         Order[]
}
